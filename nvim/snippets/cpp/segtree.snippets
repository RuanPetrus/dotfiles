snippet SegTree Iterative SegTree
	template<class S, auto op, auto idS,
			 class K, auto op_update> 
	struct SegTree {
		int n;
		vector<S> seg;
	
		SegTree(int _n) : SegTree(vector<S>(_n, idS())) {}
	
		SegTree(vector<S> v)
			: n(v.size()), seg(2*n) {
			rep(i, 0, n) seg[i+n] = v[i];
			irep(i, n-1, 1) seg[i] = op(seg[i*2], seg[i*2+1]);
		}
	
		void update(int no, K val) {
			no += n;
			seg[no] = op_update(val, seg[no]);
			while (no > 1) no >>= 1, seg[no] = op(seg[no*2], seg[no*2+1]);
		}
	
		S query(int l, int r) { // [l, r)
			S vl = idS(), vr = idS();
			for (l += n, r += n; l < r; l /= 2, r /= 2) {
				if (l & 1) vl = op(vl, seg[l++]);
				if (r & 1) vr = op(seg[--r], vr);
			}
			return op(vl, vr);
		}
	};

snippet LazySeg Iterative LazySeg
	template<typename LazySpec>
	struct LazySeg {
		using LS = LazySpec;
		using S = typename LS::S;
		using K = typename LS::K;
		vector<S> seg;
		vector<K> lazy;
		vector<bool> has_lazy;
		int n, h;
		int sz;
		vector<int> lx, rx; // Aditional info
		LazySeg(int _n) : LazySeg(vector<S>(_n, LS::id())) {}
		LazySeg(vector<S> & v) {
			sz = v.size();
			n = 1;
			h = 1;
			while(n < (int)v.size()) n <<= 1, h++;
			seg.assign(2*n, LS::id());
			lazy.resize(n);
			has_lazy.assign(n, false);
			rep(no, 0, v.size()) seg[no+n] = v[no];
			irep(no, n-1, 1) pull(no);

			// Aditional info
			lx.assign(2*n, 0); rx.assign(2*n, 0);
			lx[1] = 0; rx[1] = n;
			rep(no, 1, n) {
				int mid = (lx[no] + rx[no])/2;
				lx[no*2]   = lx[no]; rx[no*2] = mid;
				lx[no*2+1] = mid;    rx[no*2+1] = rx[no];
			}
		}

		S query(int l, int r) { // [l, r)
			l += n;
			r += n;
			push_to(l); push_to(r-1);
			S vl = LS::id(), vr = LS::id();
			while(l < r) {
				if (l & 1) vl = LS::op(vl, seg[l++]);
				if (r & 1) vr = LS::op(seg[--r], vr);
				l >>= 1; r >>= 1; 
			}
			return LS::op(vl, vr);
		}

		void update(int l, int r, K val) {
			l += n;
			r += n;
			push_to(l); push_to(r-1);
			int lo = 1, ro = 1; 
			while(l < r) {
				if (l & 1) chmax(lo, l), apply(l++, val);
				if (r & 1) chmax(ro, r), apply(--r, val);
				l >>= 1; r >>= 1;
			}
			pull_from(lo);
			pull_from(ro-1);
		}

		void apply(int no, K val) {
			// seg[no] = LS::update_op(val, seg[no], lx[no], rx[no]);
			seg[no] = LS::update(val, seg[no]);

			if (no < n) {
				if (has_lazy[no]) lazy[no] = LS::compose(val, lazy[no]);
				else lazy[no] = val;
				has_lazy[no] = true;
			}
		}

		void pull_from(int no) {
			while(no > 1) no >>= 1, pull(no);
		}

		void pull(int no) {
			seg[no] = LS::op(seg[no*2], seg[no*2+1]);
		}

		void push_to(int no) {
			irep(i, h-1, 1)  push(no >> i);
		}

		void push(int no) {
			if (has_lazy[no]) {
				apply(no*2, lazy[no]);
				apply(no*2+1, lazy[no]);
				has_lazy[no] = false;
			}
		}
	};

	struct Spec {
		using S = 
		using K = 
		/* Must satisfy the Associative Law:
		   op(a, op(b, c)) = op(op(a, b), c)
		*/
		static constexpr S op(const S & a, const S & b) {
		}

		/* Must satisfy the Distributive Law:
		update(f, op(a, b)) = op(update(f, a), update(f, b))
		Can receive range lx and rx of vertex to help 
		*/
		static constexpr S update(const K & f, const S & a) {
		}

		/* Must satisfy the Composition Law:
		   update(compose(f, g), a) = update(f, update(g, a))
		*/
		static constexpr K compose(const K & f, const K & g) {
		}

		/* Must satisfy the Identity Law:
		   op(a, identity()) = op(identity(), a) = a
		*/
		static constexpr S id() {
		}
	};

snippet OldLazySeg My old Iterative Lazy Seg
	/*
	op          :: (S, S) -> S 
	idS         :: S
	update_op   :: (F, S, int, int) -> S // Receiving lx and rx of an interval
	compose_op  :: (F, F) -> F
	idF         :: F
	*/
	template<typename S, auto op, auto idS,
			 typename F, auto update_op, auto compose_op, auto idF>
	struct LazySeg {
		vector<S> seg;
		vector<F> lazy;
		int n, h;
		vector<int> lx, rx; // Aditional info
		LazySeg(int _n) : LazySeg(vector<S>(_n, idS())) {}
		LazySeg(vector<S> & v) {
			n = 1;
			h = 1;
			while(n < (int)v.size()) n <<= 1, h++;
			seg.assign(2*n, idS());
			lazy.assign(n, idF());
			rep(no, 0, v.size()) seg[no+n] = v[no];
			irep(no, n-1, 1) pull(no);

			// Aditional info
			lx.assign(2*n, 0); rx.assign(2*n, 0);
			lx[1] = 0; rx[1] = n;
			rep(no, 1, n) {
				int mid = (lx[no] + rx[no])/2;
				lx[no*2]   = lx[no]; rx[no*2] = mid;
				lx[no*2+1] = mid;    rx[no*2+1] = rx[no];
			}
		}

		S query(int l, int r) { // [l, r)
			l += n;
			r += n;
			push_to(l); push_to(r-1);
			S vl = idS(), vr = idS();
			while(l < r) {
				if (l & 1) vl = op(vl, seg[l++]);
				if (r & 1) vr = op(seg[--r], vr);
				l >>= 1; r >>= 1; 
			}
			return op(vl, vr);
		}

		void update(int l, int r, F val) {
			l += n;
			r += n;
			push_to(l); push_to(r-1);
			int lo = 1, ro = 1; 
			while(l < r) {
				if (l & 1) chmax(lo, l), apply(l++, val);
				if (r & 1) chmax(ro, r), apply(--r, val);
				l >>= 1; r >>= 1;
			}
			pull_from(lo);
			pull_from(ro-1);
		}

		void pull_from(int no) {
			while(no > 1) no >>= 1, pull(no);
		}

		void apply(int no, F val) {
			seg[no] = update_op(val, seg[no], lx[no], rx[no]);

			if (no < n) lazy[no] = compose_op(val, lazy[no]);
		}

		void push_to(int no) {
			irep(i, h-1, 1)  push(no >> i);
		}

		void push(int no) {
			apply(no*2, lazy[no]);
			apply(no*2+1, lazy[no]);
			lazy[no] = idF();
		}

		void pull(int no) {
			seg[no] = op(seg[no*2], seg[no*2+1]);
		}

	};
